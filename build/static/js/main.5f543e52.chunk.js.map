{"version":3,"sources":["components/ContentBox/index.js","components/Grid/index.js","components/Banner/index.js","utils/text.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","HeaderTag","size","hText","Text","text","Container","fluid","children","className","Row","Col","split","map","join","Banner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAEO,SAASA,EAAOC,GACtB,IAAMC,EAAS,WAAOD,EAAME,MAC5B,OACC,cAACD,EAAD,UAAYD,EAAMG,QAIb,SAASC,EAAKJ,GACpB,OACC,4BAAIA,EAAMK,OCTL,SAASC,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACjC,OAAO,qBAAKC,UAAS,mBAAcF,EAAQ,SAAW,IAA/C,SAAsDC,IAGxD,SAASE,EAAT,GAAmC,IAApBH,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC3B,OAAO,qBAAKC,UAAS,aAAQF,EAAQ,SAAW,IAAzC,SAAgDC,IAGlD,SAASG,EAAT,GAAkC,IAAnBT,EAAkB,EAAlBA,KAAMM,EAAY,EAAZA,SAC1B,OACE,qBACEC,UAAWP,EACRU,MAAM,KACNC,KAAI,SAAAX,GAAI,MAAI,OAASA,KACrBY,KAAK,KAJV,SAMGN,ICOQO,MAnBf,WACC,OACC,cAACT,EAAD,UACC,eAACI,EAAD,WACE,cAACX,EAAD,CACQG,KAAO,IACPC,MAAM,yBAET,cAACJ,EAAD,CACCG,KAAO,IACbC,MAAM,eAEP,cAACC,EAAD,CACCC,KCFqB,qE,MCgDXW,MAxDf,WACE,OACE,mCACE,cAACV,EAAD,UACE,eAACI,EAAD,WACE,cAACC,EAAD,CAAKT,KAAO,SAGZ,eAACS,EAAD,CAAKT,KAAO,OAAZ,UACE,cAAC,EAAD,IACA,cAACQ,EAAD,UACE,cAACX,EAAD,CAAQG,KAAK,IAAIC,MAAM,eAEzB,cAACO,EAAD,UACE,cAACN,EAAD,CAAMC,KDvBQ,6XCyBhB,cAACK,EAAD,UACE,cAACX,EAAD,CAAQG,KAAK,IAAIC,MAAM,qBAEzB,cAACO,EAAD,UACE,cAACX,EAAD,CAAQG,KAAK,IAAIC,MAAM,gCAEzB,cAACO,EAAD,UACE,cAACX,EAAD,CAAQG,KAAK,IAAIC,MAAM,YAEzB,cAACO,EAAD,UACE,cAACN,EAAD,CAAMC,KD9BS,sXCgCjB,cAACK,EAAD,UACE,cAACN,EAAD,CAAMC,KD7BS,2gBC+BjB,cAACK,EAAD,UACE,cAACX,EAAD,CAAQG,KAAK,IAAIC,MAAM,YAGzB,cAACO,EAAD,UACE,cAACN,EAAD,CAAMC,KD1BO,yBC4Bf,cAACK,EAAD,UACE,cAACN,EAAD,CAAMC,KD5BQ,qRC8BhB,cAACK,EAAD,UACE,cAACX,EAAD,CAAQG,KAAO,IAAIC,MAAM,sBAE3B,cAACO,EAAD,UACE,cAACN,EAAD,CAAMC,KDvCG,iFEHRY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5f543e52.chunk.js","sourcesContent":["import React from \"react\"; \r\n\r\nexport function Header(props){\r\n\tconst HeaderTag = `h${props.size}`\r\n\treturn (\r\n\t\t<HeaderTag>{props.hText}</HeaderTag>\r\n\t)\r\n}\r\n\r\nexport function Text(props){\r\n\treturn (\r\n\t\t<p>{props.text}</p>\r\n\t)\r\n}\r\n","import React from \"react\"; \r\n\r\nexport function Container({ fluid, children }) {\r\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\nexport function Row({ fluid, children }) {\r\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\nexport function Col({ size, children }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(\" \")\r\n        .map(size => \"col-\" + size)\r\n        .join(\" \")}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\nimport {Header, Text} from '../ContentBox';\r\nimport {Row, Container } from '../Grid';\r\nimport {bannerText} from '../../utils/text';\r\n\r\n\r\nfunction Banner(){\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<Row>\r\n\t\t\t\t <Header \r\n          \t\t\tsize = '1'\r\n          \t\t\thText='Machine Learning API'\r\n        \t\t/>\r\n        \t\t<Header\r\n        \t\t\tsize = '5'\r\n\t\t\t\t\thText='Release v1'\r\n\t\t\t\t/>\r\n\t\t\t\t<Text\r\n\t\t\t\t\ttext={bannerText} \r\n\t\t\t\t/>\r\n\t\t\t</Row>\r\n\t\t</Container>\r\n\t)\r\n}\r\nexport default Banner;\r\n","export const overviewText = 'The Machine Learning API is a platform to deploy different machine learning models. Integrate \\\r\n\t\t\t\t\t\t\tMachine Learning models into your application with easy. No need to gather data, build, train \\\r\n\t\t\t\t\t\t\tand test your own models anymore. Using our endpoints you can query a machine learning model directly\\\r\n\t\t\t\t\t\t\tand use the prediction in your application.'\r\n\r\nexport const cnnAboutText1 = 'The Clothing Image Classifer is a ML model used to classify clothing into categories using a Convolutional\\\r\n\t\t\t\t\t\t\t  Neural Network.The CNN was developed and trained using the Fashion-MNIST dataset, which consists of 60,000 total train \\\r\n\t\t\t\t\t\t\t  images 10,000 test images. When using the model, images are classified into one of ten different categories. \\ '\r\n\r\nexport const cnnAboutText2 = 'There is no need to perform any preprocessing on the images. This is all performed by the API before the prediction is made. \\\r\n\t\t\t\t\t\t\t  Images for this model can be in any size, color or black and white. Before the prediction is made, the images are loaded and scaled\\\r\n\t\t\t\t\t\t\t  down to the size of 28x28 and are loaded with a grey scale. Colors are then inverted and sent to the model to perform a prediction.\\\r\n\t\t\t\t\t\t\t  Just submit the link of the photo to be classified and the rest is taken care of.'\r\n\t\t\t\t\t\r\n\r\nexport const tryText = \"Try it out, upload a url of a image you would like to classify.\"\r\n\r\nexport const bannerText = \"Utilize different Machine learning Models for your project\"\r\n\r\nexport const apiCallText = 'POST: /api/predict';\r\nexport const apiCallUsage = 'Send a url to the Clothing Image Classifier to perform a prediction. The requested body must contain a JSON array object containing the key value pair\\\r\n\t\t\t\t\t\t\t  url: \\'targetUrl\\'. The call will return a JSON object containing the key value pair type: \\'predictedType\\''\r\n","import React, {useState, useEffect} from 'react';\n// import Header from './components/Header';\nimport Banner from './components/Banner';\nimport {Header, Text} from './components/ContentBox';\nimport axios from 'axios';\nimport * as MainText from './utils/text';\nimport { Col, Row, Container } from \"./components/Grid\";\n\n\nfunction App(){\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col size = 'md-3'>\n\n          </Col>\n          <Col size = 'md-9'>\n            <Banner />\n            <Row>\n              <Header size='3' hText='Overview'/>\n            </Row>\n            <Row>\n              <Text text={MainText.overviewText} / >\n            </Row>\n            <Row>\n              <Header size='3' hText='Current Models'/>\n            </Row>\n            <Row>\n              <Header size='6' hText='Clothing Image Classifier'/>\n            </Row>\n            <Row>\n              <Header size='6' hText='About'/>\n            </Row>\n            <Row>\n              <Text text={MainText.cnnAboutText1} / >\n            </Row>\n            <Row>\n              <Text text={MainText.cnnAboutText2} / >\n            </Row>\n            <Row>\n              <Header size='6' hText='Usage'\n              />\n            </Row>\n            <Row>\n              <Text text={MainText.apiCallText} / >\n            </Row>\n            <Row>\n              <Text text={MainText.apiCallUsage} / >\n            </Row>\n            <Row>\n              <Header size = '3' hText='Try it Yourself'/>\n            </Row>\n            <Row>\n              <Text text={MainText.tryText} / >\n            </Row>\n          </Col>\n        </Row>\n        \n      </Container>\n    </>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}